{
	"AiRobot": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "DoWebBrowser",
				"description": "Do fully automation AI interactions with currently active web browser window.\r\nExample 1: \r\nNavigator.Open(\"https://v3.libraryinformationsystem.org/\");\r\nAiRobot.DoWebBrowser(\"Login as borrower/borrower\");\r\nExample 2:\r\nNavigator open earlier and browser is logged in\r\nAiRobot.DoWebBrowser(\"Change the genre of the book 'The Sign of the Four' to 'Detective Fiction'.\");\r\nNote to keep your window small. Something bigger than 1024x768 may lead to incorrect clicks.\r\n",
				"type": "",
				"returns": "",
				"signature": " /**string*/ prompt, /**number*/ timeout, /**number*/ n_last_images, /**number*/ max_tokens, /**number*/ token_limit",
				"paramInfo": {
					"token_limit": {
						"type": "number",
						"description": "Token limit to be used for whole prompt.",
						"optional": true,
						"defaultValue": 1000000
					},
					"max_tokens": {
						"type": "number",
						"description": "Maximum amount of tokens per response.",
						"optional": true,
						"defaultValue": 1000
					},
					"n_last_images": {
						"type": "number",
						"description": "Number of images to remember.",
						"optional": true,
						"defaultValue": 5
					},
					"timeout": {
						"type": "number",
						"description": "Maximum time to wait, in milliseconds",
						"optional": true,
						"defaultValue": 30000
					}
				},
				"src": "%WORKDIR%PageObjects\\AiRobot\\AiRobot.js(176,10)"
			},
			{
				"name": "DoFullScreen",
				"description": "Do fully automation AI interactions first screen.\r\nExample 1: AiRobot.DoFullScreen(\"Press 'Excel' launch icon on the desktop.\");\r\nIt is bad idea to use this function if screen size is higher than 1280x768.\r\n",
				"type": "",
				"returns": "",
				"signature": " /**string*/ prompt, /**number*/ timeout, /**number*/ n_last_images, /**number*/ max_tokens, /**number*/ token_limit",
				"paramInfo": {
					"token_limit": {
						"type": "number",
						"description": "Token limit to be used for whole prompt.",
						"optional": true,
						"defaultValue": 1000000
					},
					"max_tokens": {
						"type": "number",
						"description": "Maximum amount of tokens per response.",
						"optional": true,
						"defaultValue": 1000
					},
					"n_last_images": {
						"type": "number",
						"description": "Number of images to remember.",
						"optional": true,
						"defaultValue": 5
					},
					"timeout": {
						"type": "number",
						"description": "Maximum time to wait, in milliseconds",
						"optional": true,
						"defaultValue": 30000
					}
				},
				"src": "%WORKDIR%PageObjects\\AiRobot\\AiRobot.js(203,10)"
			},
			{
				"name": "DoScreenRegion",
				"description": "Do fully automation AI interactions first screen.\r\nExample 1: AiRobot.DoScreenRegion(\"Press 'Excel' launch icon on the desktop.\", 0, 0, 1280, 768);\r\nIt is bad idea to use this function if screen size is higher than 1280x768.\r\n",
				"type": "",
				"returns": "",
				"signature": " /**string*/ prompt, /**number*/ x, /**number*/ y, /**number*/ w, /**number*/ h, /**number*/ timeout, /**number*/ n_last_images, /**number*/ max_tokens, /**number*/ token_limit",
				"paramInfo": {
					"token_limit": {
						"type": "number",
						"description": "Token limit to be used for whole prompt.",
						"optional": true,
						"defaultValue": 1000000
					},
					"max_tokens": {
						"type": "number",
						"description": "Maximum amount of tokens per response.",
						"optional": true,
						"defaultValue": 1000
					},
					"n_last_images": {
						"type": "number",
						"description": "Number of images to remember.",
						"optional": true,
						"defaultValue": 5
					},
					"timeout": {
						"type": "number",
						"description": "Maximum time to wait, in milliseconds",
						"optional": true,
						"defaultValue": 30000
					}
				},
				"src": "%WORKDIR%PageObjects\\AiRobot\\AiRobot.js(229,10)"
			},
			{
				"name": "DoWindow",
				"description": "Do fully automation AI interactions first screen.\r\nExample 1: AiRobot.DoWindow(\"Using on-screen calculator find 3+15\", \"Calculator\");\r\nIt is bad idea to use this function if screen size is higher than 1280x768.\r\n",
				"type": "",
				"returns": "",
				"signature": " /**string*/ prompt, /**string*/ window_title, /**number*/ timeout, /**number*/ n_last_images, /**number*/ max_tokens, /**number*/ token_limit",
				"paramInfo": {
					"window_title": {
						"description": "Exact window title or regex to match window title, i.e. Calculator or regex:Calc.*"
					},
					"token_limit": {
						"type": "number",
						"description": "Token limit to be used for whole prompt.",
						"optional": true,
						"defaultValue": 1000000
					},
					"max_tokens": {
						"type": "number",
						"description": "Maximum amount of tokens per response.",
						"optional": true,
						"defaultValue": 1000
					},
					"n_last_images": {
						"type": "number",
						"description": "Number of images to remember.",
						"optional": true,
						"defaultValue": 5
					},
					"timeout": {
						"type": "number",
						"description": "Maximum time to wait, in milliseconds",
						"optional": true,
						"defaultValue": 30000
					}
				},
				"src": "%WORKDIR%PageObjects\\AiRobot\\AiRobot.js(254,10)"
			},
			{
				"name": "DoObject",
				"description": "Do fully automation AI interactions first screen.\r\nExample 1:\r\nAssuming that there is a Notepad object already in the repository, and Notepad is visible on the screen\r\nAiRobot.DoObject(\"Type 'Hello, world!' to the notepad and save to c:\\temp\\hello_world.txt\", \"Notepad\");\r\nIt is bad idea to use this function if screen size is higher than 1280x768.\r\n@param {String} prompt parameter description\r\n",
				"type": "",
				"returns": "",
				"signature": " /**string*/ prompt, /**objectid|SeSObject*/ objectId, /**number*/ timeout, /**number*/ n_last_images, /**number*/ max_tokens, /**number*/ token_limit",
				"paramInfo": {
					"object_id": {
						"description": "Object whose screen rectangle will be shown to AI robot to interact with."
					},
					"token_limit": {
						"type": "number",
						"description": "Token limit to be used for whole prompt.",
						"optional": true,
						"defaultValue": 1000000
					},
					"max_tokens": {
						"type": "number",
						"description": "Maximum amount of tokens per response.",
						"optional": true,
						"defaultValue": 1000
					},
					"n_last_images": {
						"type": "number",
						"description": "Number of images to remember.",
						"optional": true,
						"defaultValue": 5
					},
					"timeout": {
						"type": "number",
						"description": "Maximum time to wait, in milliseconds",
						"optional": true,
						"defaultValue": 30000
					}
				},
				"src": "%WORKDIR%PageObjects\\AiRobot\\AiRobot.js(312,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "AiRobot. Implements fully-automatic interactions with target window or screen region (keyboard and mouse). Should be used when AI is unable to\r\nfind reasonable entries in other page objects. This way of interacting is last resort. It may be applied to complex, exploratory style actions.",
		"src": "%WORKDIR%PageObjects\\AiRobot\\AiRobot.js",
		"version": "0.0.20",
		"url": "https://github.com/Inflectra/rapise-powerpack/tree/master/FWUsefulPageObjects/PageObjects/AiRobot"
	},
	"ExtentReports": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "Demo",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ExtentReports\\ExtentReports.js(13,10)"
			},
			{
				"name": "Log",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "/**string*/ status, /**string*/ details",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ExtentReports\\ExtentReports.js(22,10)"
			},
			{
				"name": "LogScreenshot",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "/**string*/ base64, /**string*/ title",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ExtentReports\\ExtentReports.js(31,10)"
			},
			{
				"name": "CreateTest",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "/**string*/ name, /**string*/ description",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ExtentReports\\ExtentReports.js(40,10)"
			},
			{
				"name": "Init",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ExtentReports\\ExtentReports.js(50,10)"
			},
			{
				"name": "Finish",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ExtentReports\\ExtentReports.js(71,10)"
			},
			{
				"name": "Clear",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ExtentReports\\ExtentReports.js(83,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "ExtentReports provides JS interface to support for extentreports-csharp library. But the main thing is that it overrides SeSOnReportMessage and generates html-based ExtentReports report instead of default Rapise report.\r\n@see https://www.inflectra.com/Support/KnowledgeBase/KB861.aspx",
		"src": "%WORKDIR%PageObjects\\ExtentReports\\ExtentReports.js",
		"version": "1.0.0",
		"url": "https://github.com/Inflectra/rapise-powerpack/tree/master/FWUsefulPageObjects/PageObjects/ExtentReports"
	},
	"KeyboardHelper": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "PressAlt",
				"description": "@PageObject KeyboardHelper provides handy way for pressing/releasing modified keys.\r\n@Version 1.0.1\r\n",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\KeyboardHelper\\KeyboardHelper.js(8,10)"
			},
			{
				"name": "ReleaseAlt",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\KeyboardHelper\\KeyboardHelper.js(13,10)"
			},
			{
				"name": "PressCtrl",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\KeyboardHelper\\KeyboardHelper.js(18,10)"
			},
			{
				"name": "ReleaseCtrl",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\KeyboardHelper\\KeyboardHelper.js(23,10)"
			},
			{
				"name": "PressShift",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\KeyboardHelper\\KeyboardHelper.js(28,10)"
			},
			{
				"name": "ReleaseShift",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\KeyboardHelper\\KeyboardHelper.js(33,10)"
			},
			{
				"name": "PressWin",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\KeyboardHelper\\KeyboardHelper.js(38,10)"
			},
			{
				"name": "ReleaseWin",
				"description": "",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\KeyboardHelper\\KeyboardHelper.js(43,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "KeyboardHelper provides handy way for pressing/releasing modified keys.",
		"src": "%WORKDIR%PageObjects\\KeyboardHelper\\KeyboardHelper.js",
		"version": "1.0.1",
		"url": "https://github.com/Inflectra/rapise-powerpack/tree/master/FWUsefulPageObjects/PageObjects/KeyboardHelper"
	},
	"ListChecker": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "VerifyMenu",
				"description": "Verify that `menuContents` has all lines/items from `expected` and nothing else.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/menuContents, /**string||string[]*/expected",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ListChecker\\ListChecker.js(14,10)"
			},
			{
				"name": "VerifyMenuContains",
				"description": "Verify that `menuContents` has all lines/items from `expected` and maybe something else.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/menuContents, /**string||string[]*/expected",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ListChecker\\ListChecker.js(22,10)"
			},
			{
				"name": "CompareToDropdown",
				"description": "Check that dropdown with `idList` defined in Dropdowns.xlsx has equals `menuContents` (has all same items, maybe in different order).\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/idList, /**string*/menuContents",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ListChecker\\ListChecker.js(87,10)"
			},
			{
				"name": "GetDropdownList",
				"description": "Return values of dropdown with id `idList` as array of strings. The list is taken\r\nfrom %WORKDIR%\\Dropdowns.xlsx unless optional `xlsPath` is specified.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/idList, /**string*/xlsPath",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ListChecker\\ListChecker.js(96,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "ListChecker helps comparing multiline strings with lists and dropdowns.\r\nExpected list may be an array or also a multiline list. It may come from application,\r\nfrom variable or from Dropdowns.",
		"src": "%WORKDIR%PageObjects\\ListChecker\\ListChecker.js",
		"version": "1.0.1",
		"url": "https://github.com/Inflectra/rapise-powerpack/tree/master/FWUsefulPageObjects/PageObjects/ListChecker"
	},
	"ManagedHelper": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "PressModalButton",
				"description": "Find and press a button in a modal dialog\r\n@param {string} buttonCaption - button caption, i.e. 'OK', 'Cancel' etc.\r\n@param {string} dialogCaption - dialog title\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/buttonCaption, /**string*/dialogCaption",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ManagedHelper\\ManagedHelper.js(16,10)"
			},
			{
				"name": "FindModalDialog",
				"description": "Find modal Managed dialog with given title within process with given `pid`.\r\n@param {string} dialogCaption - caption to look for\r\n@param {number} pid - optional PID of the application\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/dialogCaption, /**number*/pid",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ManagedHelper\\ManagedHelper.js(43,10)"
			},
			{
				"name": "ContextMenuSelect",
				"description": "Click menu item in the context menu by given `path`. When `path` is not set,\r\nreturn full contents of the context menu as list\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/path",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ManagedHelper\\ManagedHelper.js(88,10)"
			},
			{
				"name": "GetContextMenuObject",
				"description": "Return ManagedObject representing currently visible context menu\r\n",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ManagedHelper\\ManagedHelper.js(106,10)"
			},
			{
				"name": "WaitForPopup",
				"description": "Check for managed popup window with given `caption` to show up on the screen.\r\nLimit check with `timeout`.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/caption, /**number*/timeout",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\ManagedHelper\\ManagedHelper.js(149,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "ManagedHelper handy methods for popup dialogs and context menus.\r\n- Work with popup dialogs (wait for appearance)\r\n- Click context menu\r\n- Return context menu items as list",
		"src": "%WORKDIR%PageObjects\\ManagedHelper\\ManagedHelper.js",
		"version": "1.0.3",
		"url": "https://github.com/Inflectra/rapise-powerpack/tree/master/FWUsefulPageObjects/PageObjects/ManagedHelper"
	},
	"PDF": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "GetFullText",
				"description": "Parse PDF at `pdfPath` and return its text representation for further processing",
				"type": "string",
				"returns": "Text of the PDF file.",
				"signature": "/**string*/pdfPath",
				"paramInfo": {
					"pdfPath": {
						"description": "Path to input PDF file.",
						"binding": "path",
						"ext": "arf"
					}
				},
				"src": "%WORKDIR%PageObjects\\PDF\\PDF.js(9,10)"
			},
			{
				"name": "Contains",
				"description": "Parse PDF at `pdfPath` and check if it contains `textOrRegexp` value.",
				"type": "string",
				"returns": "`true` if text present in the PDF.",
				"signature": "/**string*/pdfPath, /**string*/textOrRegexp",
				"paramInfo": {
					"pdfPath": {
						"description": "Path to input PDF file.",
						"binding": "path",
						"ext": "arf"
					},
					"textOrRegexp": {
						"description": "Either plain string, or something starting from regex: to look in the file"
					}
				},
				"src": "%WORKDIR%PageObjects\\PDF\\PDF.js(75,10)"
			},
			{
				"name": "AssertContains",
				"description": "Parse PDF at `pdfPath` and check if it contains `textOrRegexp` value writing \r\nwriting to the report as `assertionMessage`.",
				"type": "string",
				"returns": "Text of the PDF file.",
				"signature": "/**string*/assertionMessage, /**string*/pdfPath, /**string*/textOrRegexp",
				"paramInfo": {
					"pdfPath": {
						"description": "Path to input PDF file.",
						"binding": "path",
						"ext": "arf"
					},
					"textOrRegexp": {
						"description": "Either plain string, or something starting from regex: to look in the file"
					},
					"assertionMessage": {
						"description": "Line to write to the report"
					}
				},
				"src": "%WORKDIR%PageObjects\\PDF\\PDF.js(112,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "PDF handling: read text, check that PDF contains some text, assert PDF contains something.",
		"src": "%WORKDIR%PageObjects\\PDF\\PDF.js",
		"version": "1.0.1",
		"url": "https://github.com/Inflectra/rapise-powerpack/tree/master/FWUsefulPageObjects/PageObjects/PDF"
	},
	"Playwright": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "DoPlay",
				"description": "Run playwright test `cmdParams` and import results into Rapise test report.\r\n@param {String} `cmdParams` additional parameters. The params is anything mentioned here: https://playwright.dev/docs/test-cli going after `npx playwright test `\r\nExamples:\r\nRun all test *.spec.js / *.spec.ts files (with respect to playwright.config.ts / playwright.config.js)\r\nPlaywright.DoPlay();\r\nRun files that have my-spec or my-spec-2 in the file name\r\nPlaywright.DoPlay(\"my-spec my-spec-2\");\r\nRun tests that are in line 42 in my-spec.ts\r\nPlaywright.DoPlay(\"my-spec.ts:42\");\r\nRun tests in headed browsers\r\nPlaywright.DoPlay(\"--headed\");\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/cmdParams",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\Playwright\\Playwright.js(112,10)"
			},
			{
				"name": "DoInvoke",
				"description": "Invoke user callback, passing current browser as a parameter: cb({page,expect,browser})\r\n@param {function} `callBack` your callback function fn(page,expect,browser) to invoke.\r\nExamples:\r\nPlaywright.DoInvoke(async ({page,expect}) {\r\nawait expect(page).not.toHaveURL('error');\r\n})\r\n",
				"type": "",
				"returns": "",
				"signature": "/**function*/callBack",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\Playwright\\Playwright.js(151,10)"
			},
			{
				"name": "DoImportJsonReport",
				"description": "Import report in JSON format produced by Playwright earlier.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/path",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\Playwright\\Playwright.js(161,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "Playwright.DoInvoke(async callBack({page,expect})=>{...}). Allow playwright to attach to currently running browser (with Navigator.Open) and do something using Playwright.",
		"src": "%WORKDIR%PageObjects\\Playwright\\Playwright.js",
		"version": "0.0.3",
		"url": "https://github.com/Inflectra/rapise-powerpack/tree/master/FWUsefulPageObjects/PageObjects/Playwright"
	},
	"RapiseUtils": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "ConvertAICommandRepository",
				"description": "Converts AI Command structure to new format: \r\nSingle ai.commands.json per Test Case/Page Object located in the same folder\r\nas an RVL file that contains these commands.\r\n",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\RapiseUtils\\RapiseUtils.js(14,10)"
			},
			{
				"name": "CleanAICommandCache",
				"description": "Cleans AI cache, removes unused commands from ai.commands.json files.\r\n",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\RapiseUtils\\RapiseUtils.js(56,10)"
			},
			{
				"name": "CleanAICommandCacheDeprecated",
				"description": "Cleans AI cache, removes unused .json files from AI\\commands folder.\r\n",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\RapiseUtils\\RapiseUtils.js(149,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "RapiseUtils provides various actions to perform framework-oriented tasks.",
		"src": "%WORKDIR%PageObjects\\RapiseUtils\\RapiseUtils.js",
		"version": "1.0.1",
		"url": "https://github.com/Inflectra/rapise-powerpack/tree/master/FWUsefulPageObjects/PageObjects/RapiseUtils"
	},
	"Sfdc": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "Launch",
				"description": "Launches Salesforce in a browser. SfdcUrl, UserName, Password must be set in Config.xlsx\r\n",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\Sfdc\\Sfdc.js(14,10)"
			},
			{
				"name": "OpenApp",
				"description": "Opens application.\r\n@param app Name of an application (e.g. Service, Marketing, Sales).\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/ app",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\Sfdc\\Sfdc.js(29,10)"
			},
			{
				"name": "NavigateModule",
				"description": "Navigates to module using nav bar.\r\n@param module Name of a module (e.g. Leads, Contacts, Opportunities).\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/ module",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\Sfdc\\Sfdc.js(49,10)"
			},
			{
				"name": "SelectListView",
				"description": "Selects list view.\r\n@param view Name of a view. E.g. Recently Viewed, All Open Leads\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/ view",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\Sfdc\\Sfdc.js(68,10)"
			},
			{
				"name": "ClickButton",
				"description": "Clicks button by name\r\n@param name Name of a button\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/ name",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\Sfdc\\Sfdc.js(93,10)"
			},
			{
				"name": "SetTextField",
				"description": "Sets text into a form field\r\n@param name Name of a field\r\n@param value Text to enter\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/ name, /**string*/ value",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\Sfdc\\Sfdc.js(113,10)"
			},
			{
				"name": "SearchTable",
				"description": "Searches data in a table.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/ value",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\Sfdc\\Sfdc.js(134,10)"
			},
			{
				"name": "SelectComboboxItem",
				"description": "Selects item from a combobox\r\n@param item Item name.\r\n@param name Name of a combobox.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/ name, /**string*/ item",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\Sfdc\\Sfdc.js(158,10)"
			},
			{
				"name": "SaveDom",
				"description": "Saves DOM tree of the current page to dom.xml file.\r\n",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\Sfdc\\Sfdc.js(197,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "Sfdc object to perform common actions like launch, navigate module, etc.",
		"src": "%WORKDIR%PageObjects\\Sfdc\\Sfdc.js",
		"version": "1.0.4",
		"url": "https://github.com/Inflectra/rapise-powerpack/tree/master/FWUsefulPageObjects/PageObjects/Sfdc"
	},
	"StringChecker": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "CheckPattern",
				"description": "Compare `str` with `pattern`. Pattern may contain fields defined in the `defObj`.\r\n`defObj` is a structure:\r\n{\r\nf: \"<range of values>\"\r\n}\r\nso each time 'f' is found in the pattern, it will be matched agains <range of values>.\r\nExample:\r\nStringChecker.CheckPattern('1-X', 'N-L', {N:\"0123456789\", L:\"XYZ\"});\r\nWill check that:\r\n- 1 is a number \r\n- '-' is exactly '-' (because it it is not a defined field)\r\n- X belongs to range X,Y or Z.\r\nFunction returns true if `str` matches the `pattern`. Otherwise it return false and global variable PMResult contains detailed information about the difference.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/str, /**string*/pattern, /**object*/defObj",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(34,10)"
			},
			{
				"name": "VerifyPattern",
				"description": "Match pattern using 'StringChecker.CheckPattern' and do an assertion for the result. `message` is an assertion message.\r\nWhen match is failed, detailed information about the difference is saved to the report.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string*/str, /**string*/pattern, /**object*/defObj",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(96,10)"
			},
			{
				"name": "CheckPatternRVL",
				"description": "Match pattern using 'StringChecker.CheckPattern'. The function returns `true` if match is successfull.\r\nThis version of function is dedicated to be used from RVL. Additional pattern fields may be passed as additional parameters (RVL array params).\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/str, /**string*/pattern",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(112,10)"
			},
			{
				"name": "VerifyPatternRVL",
				"description": "Match pattern using 'StringChecker.CheckPattern' and do an assertion for the result. `message` is an assertion message.\r\nWhen match is failed, detailed information about the difference is saved to the report.\r\nThis version of function is dedicated to be used from RVL. Additional pattern fields may be passed as additional parameters (RVL array params).\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string*/str, /**string*/pattern",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(122,10)"
			},
			{
				"name": "CheckRegex",
				"description": "Check if `str` matches given regular expression. Match means the \r\nwhole `str` is covered by regexp.\r\nIf match is partial, it is assumed that there is no match. For example:\r\nABC matches A.*\r\nbut\r\nABC does not match AB (because it is partial match, not covering trailing C)\r\nIf you pass in the RegExp object as `regexstr`, then match will be done using RegExp.test function. I.e. it may be either partial or full match depending on use of ^ and $.\r\nFunction returns true if `str` matches the `regexstr`. Otherwise it return `false`.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/str, /**string|RegEx*/regexstr",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(139,10)"
			},
			{
				"name": "VerifyRegex",
				"description": "Verify that `str` matches given regular expression `regexstr` using StringChecker.CheckRegex.\r\nWhen match is failed, detailed information about the difference is saved to the report.\r\nThis version of function is dedicated to be used from RVL. Additional pattern fields may be passed as additional parameters (RVL array params).\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string*/str, /**string|RegEx*/regexstr",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(156,10)"
			},
			{
				"name": "CheckUnique",
				"description": "Check that given `val` is unique. I.e. it differs from all known previous values.\r\nFunction returns `true` if `val` is unique, `false` otherwise.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/val",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(167,10)"
			},
			{
				"name": "VerifyUnique",
				"description": "Verify that given `val` is unique. Write result to the report with provided `message`.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string*/val",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(181,10)"
			},
			{
				"name": "CheckContainsOneOf",
				"description": "Check that given `val` contains at least one symbol from given string of `chars`.\r\nFunction returns `true` if `val` is unique, `false` otherwise.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/val, /**string*/chars",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(191,10)"
			},
			{
				"name": "VerifyContainsOneOf",
				"description": "Verify that given `val` contains at least one symbol from given string of `chars`. Write result to the report with provided `message`.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string*/val, /**string*/chars",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(207,10)"
			},
			{
				"name": "CheckMatchesOneOf",
				"description": "Check that given `val` matches (i.e. equals or regex: matches) one of `values`. Values list may be an array or also a multiline list (i.e. \\n-separated string).\r\nFunction returns `true` if `val` is found among `values`, `false` otherwise.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/val, /**string|string[]*/values",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(218,10)"
			},
			{
				"name": "VerifyMatchesOneOf",
				"description": "Check that given `val` matches (i.e. equals or regex: matches) one of `values`. Values list may be an array or also a multiline list (i.e. \\n-separated string). Write result to the report with provided `message`.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string*/val, /**string|string[]*/values",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(239,10)"
			},
			{
				"name": "CheckContainsNoneOf",
				"description": "Check that given `val` contains none of symbols from given string of `chars`.\r\nFunction returns `true` if `val` is unique, `false` otherwise.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/val, /**string*/chars",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(249,10)"
			},
			{
				"name": "VerifyContainsNoneOf",
				"description": "Verify that given `val` contains none of symbols from given string of `chars`. Write result to the report with provided `message`.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string*/val, /**string*/chars",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(268,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "StringChecker helps comparing strings with regular patterns.",
		"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js",
		"version": "1.0.2",
		"url": "https://github.com/Inflectra/rapise-powerpack/tree/master/FWUsefulPageObjects/PageObjects/StringChecker"
	},
	"TableHandler": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "GetRowCount",
				"description": "Get number of <tr> rows in the table\r\n",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\TableHandler\\TableHandler.js(11,10)"
			},
			{
				"name": "DoClickCell",
				"description": "@paraminfo\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/rowText, /**string*/colId",
				"paramInfo": {
					"rowText": {
						"description": "Text to find"
					},
					"colId": {
						"description": "Column caption for a cell to click in"
					}
				},
				"src": "%WORKDIR%PageObjects\\TableHandler\\TableHandler.js(36,10)"
			},
			{
				"name": "VerifyRow",
				"description": "Find a row containing `rowText` and check that it also has cell having `otherText`.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/rowText, /**string*/otherText",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\TableHandler\\TableHandler.js(81,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "TableHandler makes it easy to work with <table></table> based tables.",
		"src": "%WORKDIR%PageObjects\\TableHandler\\TableHandler.js",
		"version": "1.0.1",
		"url": "https://github.com/Inflectra/rapise-powerpack/tree/master/FWUsefulPageObjects/PageObjects/TableHandler"
	},
	"WebPageHelper": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "GetFullPageText",
				"description": "Returns string containing all visible text on the current page.\r\nExample:\r\nvar page = WebPageHelper.GetFullPageText();\r\nTester.AssertContains('Welcome message found on the page', page, 'Welcome, Friend!')\r\n",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(20,10)"
			},
			{
				"name": "GetXPathItemsAsList",
				"description": "Returns string containing results of XPath query in multiline format - one item per line\r\nExample:\r\nvar allLinks = WebPageHelper.GetXPathItemsAsList('//a');\r\nTester.Message('All links on the page', allLinks);\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/xpath",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(36,10)"
			},
			{
				"name": "CheckPageContains",
				"description": "Check that page contains given `textToFind`. This action does not write to the report\r\nand simply returns `true` when text was found and `false` otherwise. You may pass the result\r\nto the assertion or if statement.\r\nExample:\r\nif( WebPageHelper.CheckPageContains('Welcome, Friend!') ) {\r\nAlready logged in, need to log out first.\r\n}\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/textToFind",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(67,10)"
			},
			{
				"name": "CheckVisible",
				"description": "Check that page contains given element, identified by label, /xpath, css= or text. Then check if it is displayed.\r\nExample:\r\nif( WebPageHelper.CheckVisible('Progress Dialog') ) {\r\nDialog is available and displayed\r\n}\r\nExample:\r\nif( WebPageHelper.CheckPageContains('css=h1') ) {\r\nTitle is available\r\n}\r\nExample:\r\nif( WebPageHelper.CheckPageContains('//h1') ) {\r\nTitle is available\r\n}\r\n",
				"type": "",
				"returns": "'true' if the upload was successful; otherwise, it returns false.",
				"signature": "/**string*/objIdXPathLabelText",
				"paramInfo": {
					"objIdXPathLabelText": {
						"type": "string|objectid",
						"description": "The target element to click. This can be an object reference or an XPath selector string or element id or `css=<some css>` or `//xpath` or label (<label for=>***</label> or aria-label=***)."
					}
				},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(88,10)"
			},
			{
				"name": "VerifyVisible",
				"description": "Check that page contains has a single given element visible\r\nExample:\r\nWebPageHelper.VerifyPageVisible('Must see a header', 'css=h1');\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string|objectid*/objIdXPathLabelText",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(110,10)"
			},
			{
				"name": "VerifyPageContains",
				"description": "Check that page contains given `textToFind` and write Pass or Fail to the report\r\naccordingly\r\nExample:\r\nWebPageHelper.VerifyPageContains('Page must have welcome message', 'Welcome, Friend!');\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string*/textToFind",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(121,10)"
			},
			{
				"name": "DoClickByText",
				"description": "Find an element by text and click on it. Take into account only element text.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/text",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(139,10)"
			},
			{
				"name": "DoClickByPlaceholder",
				"description": "Find an element by placeholder and click on it.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/placeholderText",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(163,10)"
			},
			{
				"name": "DoClickByValue",
				"description": "Find an element by value attribute and click on it.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/value",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(177,10)"
			},
			{
				"name": "DoClickByTitle",
				"description": "Find an element by title attribute and click on it. Title is usually visible as\r\nan element's tooltip.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/title",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(192,10)"
			},
			{
				"name": "DoClickByName",
				"description": "Find an element by name attribute and click on it. The name is usually invisible\r\nso you need to know it in advance.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/name",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(207,10)"
			},
			{
				"name": "DoClickByClassName",
				"description": "Find an element by CSS class name and click on it.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/className",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(221,10)"
			},
			{
				"name": "DoClickById",
				"description": "Find an element by ID and click.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/id",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(236,10)"
			},
			{
				"name": "DoClickByXPath",
				"description": "Find an element by XPath and click.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/xpath",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(251,10)"
			},
			{
				"name": "DoClickByTextTitlePlaceholder",
				"description": "Find an element text, title or placeholder and click on it.\r\nThis is the most generic method for finding something on the page by visible\r\ntext and clicking on it. It covers buttons, links and various controls that\r\ninclude title (title is usually shown as a tooltip), placeholder or hint.\r\nExample 1:\r\nWebPageHelper.DoClickByTextTitlePlaceholder('Enter username...'); // This should capture a placeholder\r\nExample 2:\r\nWebPageHelper.DoClickByTextTitlePlaceholder('Login'); // This should capture a button\r\nExample 3:\r\nWebPageHelper.DoClickByTextTitlePlaceholder('Press to log into the system'); // This should capture a tooltip\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/text",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(277,10)"
			},
			{
				"name": "DoFileDragAndDrop",
				"description": "Uploads a file using drag-and-drop to a specified browser element.  \r\nThis function allows you to programmatically simulate a file drag-and-drop  \r\naction onto a specified target element in the browser. It creates a hidden  \r\nfile input element to handle the file upload process and dispatches  \r\nevents that simulate the drag-and-drop behavior.  \r\n@param {string|objectid} elOrXPath - The target element to receive the file.  \r\nThis can be an object reference or an XPath  \r\nselector string. Typically a `label` or `div`  \r\nelement where the file may be dropped.  \r\n@param {string} filePath - The path to the local file to upload. This can be an  \r\nabsolute path or a relative path with respect to a  \r\nframework directory.  \r\n@returns {boolean} Returns true if the upload was successful; otherwise, it   \r\nreturns false.  \r\n@example  \r\n```javascript\r\nvar success = WebPageHelper.DoFileDragAndDrop('//input[type=\"file\"]', '/path/to/file.txt');\r\nTester.SoftAssert(\"File uploaded.\", success, '/path/to/file.txt');\r\n```\r\n",
				"type": "",
				"returns": "'true' if the upload was successful; otherwise, it returns false.",
				"signature": "/**string|objectid*/elOrXPath, /**string*/filePath",
				"paramInfo": {
					"elOrXPath": {
						"type": "string|objectid",
						"description": "The target element to receive the file. This can be an object reference or an XPath selector string. Typically a `label` or `div` element where the file may be dropped."
					},
					"filePath": {
						"type": "string",
						"description": "The path to the local file to upload. This can be an absolute path or a relative path with respect to a framework directory."
					}
				},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(317,10)"
			},
			{
				"name": "DoTripleClick",
				"description": "Do triple-click on the element. May be useful to select the whole sencence or\r\nparagraph or input contents for further Copy+Paste.\r\n@param {string|objectid} elOrXPath - The target element to click.  \r\nThis can be an object reference or an XPath  \r\nselector string.\r\n@returns {boolean} Returns true triple click .  \r\n@example  \r\n```javascript\r\nSelect the whole header\r\nWebPageHelper.DoTripleClick('//h1');\r\n```\r\n",
				"type": "",
				"returns": "'true' if the upload was successful; otherwise, it returns false.",
				"signature": "/**string|objectid*/elOrXPath, /**number*/offsetX, /**number*/offsetY",
				"paramInfo": {
					"elOrXPath": {
						"type": "string|objectid",
						"description": "The target element to click. This can be an object reference or an XPath selector string."
					}
				},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(392,10)"
			},
			{
				"name": "DoClick",
				"description": "Do click on the element.\r\n@param {string|objectid} objIdXPathLabelText - The target element to click. This can be an object reference or an XPath selector string or element id or `css=<some css>` or `//xpath` or label (<label for=>***</label> or aria-label=***).\r\n@returns {boolean} Returns true when click succeeded.\r\n@examples\r\n```javascript\r\nClick header by xpath\r\nWebPageHelper.DoClick('//h1');\r\nClick header by css\r\nWebPageHelper.DoClick('css=h1');\r\nClick header by text\r\nWebPageHelper.DoClick('Welcome to mycorp!');\r\nClick header by object id (assuming there is welcomeObj object in the repository)\r\nWebPageHelper.DoClick('welcomeObj');\r\n```\r\n",
				"type": "",
				"returns": "'true' if the upload was successful; otherwise, it returns false.",
				"signature": "/**string|objectid*/objIdXPathLabelText",
				"paramInfo": {
					"objIdXPathLabelText": {
						"type": "string|objectid",
						"description": "The target element to click. This can be an object reference or an XPath selector string or element id or `css=<some css>` or `//xpath` or label (<label for=>***</label> or aria-label=***)."
					}
				},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(436,10)"
			},
			{
				"name": "WaitForVisible",
				"description": "Wait for given element to appear on the screen.\r\n@param {string|objectid} objIdXPathLabelText - The target element to click. This can be an object reference or an XPath selector string or element id or `css=<some css>` or `//xpath` or label (<label for=>***</label> or aria-label=***).\r\n@param {number} timeout - maximum wait time in milliseconds\r\n@returns {boolean} Returns true when element found and visible, false otherwise.\r\n@examples\r\n```javascript\r\nWait for confirmation message up to one minute\r\nWebPageHelper.WaitForVisible('Operation Succeeded!', 60000);\r\n```\r\n",
				"type": "",
				"returns": "'true' if the upload was successful; otherwise, it returns false.",
				"signature": "/**string|objectid*/objIdXPathLabelText, /**number*/timeout",
				"paramInfo": {
					"objIdXPathLabelText": {
						"type": "string|objectid",
						"description": "The target element to click. This can be an object reference or an XPath selector string or element id or `css=<some css>` or `//xpath` or label (<label for=>***</label> or aria-label=***)."
					},
					"timeout": {
						"type": "number",
						"description": "Maximum time to wait, in milliseconds",
						"optional": true,
						"defaultValue": 30000
					}
				},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(469,10)"
			},
			{
				"name": "WaitWhileVisible",
				"description": "Wait while given element is on the screen. Useful to wait for progress bars that are\r\nshown while long operations are performed.\r\n@param {string|objectid} objIdXPathLabelText - The target element to click. This can be an object reference or an XPath selector string or element id or `css=<some css>` or `//xpath` or label (<label for=>***</label> or aria-label=***).\r\n@param {number} timeout - maximum wait time in milliseconds\r\n@returns {boolean} Returns `true` when element is finally invisible, `false` otherwise.\r\n@examples\r\n```javascript\r\nWait for operation to complete up to one two minutes\r\nWebPageHelper.WaitWhileVisible('Operation in progress, please wait!', 120000);\r\n```\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string|objectid*/objIdXPathLabelText, /**number*/timeout",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(515,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "WebPageHelper is designed to help doing various actions and checks\r\nwith the currently open web page without need to use XPath or objects. The\r\nmethods of WebPageHelper are in general slower than those having exact XPath, \r\nbut it is useful for writing sanity checks and quick validation scenarios.\r\nThe power of those methods are that they are cross-frame and are inteded to \r\ncover the whole visible contents of the page, rather than only the root frame.",
		"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js",
		"version": "1.0.7",
		"url": "https://github.com/Inflectra/rapise-powerpack/tree/master/FWUsefulPageObjects/PageObjects/WebPageHelper"
	}
}