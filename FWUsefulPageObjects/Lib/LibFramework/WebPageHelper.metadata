{
	"WebPageHelper": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "GetFullPageText",
				"description": "Returns string containing all visible text on the current page.\r\nExample:\r\nvar page = WebPageHelper.GetFullPageText();\r\nTester.AssertContains('Welcome message found on the page', page, 'Welcome, Friend!')\r\n",
				"type": "",
				"returns": "",
				"signature": "",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(20,10)"
			},
			{
				"name": "CheckPageContains",
				"description": "Check that page contains given `textToFind`. This action does not write to the report\r\nand simply returns `true` when text was found and `false` otherwise. You may pass the result\r\nto the assertion or if statement.\r\nExample:\r\nif( WebPageHelper.CheckPageContains('Welcome, Friend!') ) {\r\nAlready logged in, need to log out first.\r\n}\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/textToFind",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(39,10)"
			},
			{
				"name": "VerifyPageContains",
				"description": "Check that page contains given `textToFind` and write Pass or Fail to the report\r\naccordingly\r\nExample:\r\nWebPageHelper.VerifyPageContains('Page must have welcome message', 'Welcome, Friend!');\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string*/textToFind",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(51,10)"
			},
			{
				"name": "DoClickByText",
				"description": "Find an element by text and click on it. Take into account only element text.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/text",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(69,10)"
			},
			{
				"name": "DoClickByPlaceholder",
				"description": "Find an element by placeholder and click on it.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/placeholderText",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(93,10)"
			},
			{
				"name": "DoClickByValue",
				"description": "Find an element by value attribute and click on it.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/value",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(107,10)"
			},
			{
				"name": "DoClickByTitle",
				"description": "Find an element by title attribute and click on it. Title is usually visible as\r\nan element's tooltip.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/title",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(122,10)"
			},
			{
				"name": "DoClickByName",
				"description": "Find an element by name attribute and click on it. The name is usually invisible\r\nso you need to know it in advance.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/name",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(137,10)"
			},
			{
				"name": "DoClickByClassName",
				"description": "Find an element by CSS class name and click on it.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/className",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(151,10)"
			},
			{
				"name": "DoClickById",
				"description": "Find an element by ID.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/id",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(166,10)"
			},
			{
				"name": "DoClickByTextTitlePlaceholder",
				"description": "Find an element text, title or placeholder and click on it.\r\nThis is the most generic method for finding something on the page by visible\r\ntext and clicking on it. It covers buttons, links and various controls that\r\ninclude title (title is usually shown as a tooltip), placeholder or hint.\r\nExample 1:\r\nWebPageHelper.DoClickByTextTitlePlaceholder('Enter username...'); // This should capture a placeholder\r\nExample 2:\r\nWebPageHelper.DoClickByTextTitlePlaceholder('Login'); // This should capture a button\r\nExample 3:\r\nWebPageHelper.DoClickByTextTitlePlaceholder('Press to log into the system'); // This should capture a tooltip\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/text",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(192,10)"
			},
			{
				"name": "DoFileDragAndDrop",
				"description": "Uploads a file using drag-and-drop to a specified browser element.  \r\nThis function allows you to programmatically simulate a file drag-and-drop  \r\naction onto a specified target element in the browser. It creates a hidden  \r\nfile input element to handle the file upload process and dispatches  \r\nevents that simulate the drag-and-drop behavior.  \r\n@param {string|objectid} elOrXPath - The target element to receive the file.  \r\nThis can be an object reference or an XPath  \r\nselector string. Typically a `label` or `div`  \r\nelement where the file may be dropped.  \r\n@param {string} filePath - The path to the local file to upload. This can be an  \r\nabsolute path or a relative path with respect to a  \r\nframework directory.  \r\n@returns {boolean} Returns true if the upload was successful; otherwise, it   \r\nreturns false.  \r\n@example  \r\n```javascript\r\nvar success = WebPageHelper.DoFileDragAndDrop('//input[type=\"file\"]', '/path/to/file.txt');\r\nTester.SoftAssert(\"File uploaded.\", success, '/path/to/file.txt');\r\n```\r\n",
				"type": "",
				"returns": "'true' if the upload was successful; otherwise, it returns false.",
				"signature": "/**string|objectid*/elOrXPath, /**string*/filePath",
				"paramInfo": {
					"elOrXPath": {
						"type": "string|objectid",
						"description": "The target element to receive the file. This can be an object reference or an XPath selector string. Typically a `label` or `div` element where the file may be dropped."
					},
					"filePath": {
						"type": "string",
						"description": "The path to the local file to upload. This can be an absolute path or a relative path with respect to a framework directory."
					}
				},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(232,10)"
			},
			{
				"name": "DoTripleClick",
				"description": "Do triple-click on the element. May be useful to select the whole sencence or\r\nparagraph or input contents for further Copy+Paste.\r\n@param {string|objectid} elOrXPath - The target element to click.  \r\nThis can be an object reference or an XPath  \r\nselector string.\r\n@returns {boolean} Returns true triple click .  \r\n@example  \r\n```javascript\r\nSelect the whole header\r\nWebPageHelper.DoTripleClick('//h1');\r\n```\r\n",
				"type": "",
				"returns": "'true' if the upload was successful; otherwise, it returns false.",
				"signature": "/**string|objectid*/elOrXPath, /**number*/offsetX, /**number*/offsetY",
				"paramInfo": {
					"elOrXPath": {
						"type": "string|objectid",
						"description": "The target element to click. This can be an object reference or an XPath selector string."
					}
				},
				"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js(307,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "WebPageHelper is designed to help doing various actions and checks",
		"src": "%WORKDIR%PageObjects\\WebPageHelper\\WebPageHelper.js",
		"version": "1.0.6"
	}
}