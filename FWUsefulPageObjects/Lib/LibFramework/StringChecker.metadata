{
	"StringChecker": {
		"window_name": "PageObjects",
		"flavor": "GlobalObject",
		"actions": [
			{
				"name": "CheckPattern",
				"description": "Compare `str` with `pattern`. Pattern may contain fields defined in the `defObj`.\r\n`defObj` is a structure:\r\n{\r\nf: \"<range of values>\"\r\n}\r\nso each time 'f' is found in the pattern, it will be matched agains <range of values>.\r\nExample:\r\nStringChecker.CheckPattern('1-X', 'N-L', {N:\"0123456789\", L:\"XYZ\"});\r\nWill check that:\r\n- 1 is a number \r\n- '-' is exactly '-' (because it it is not a defined field)\r\n- X belongs to range X,Y or Z.\r\nFunction returns true if `str` matches the `pattern`. Otherwise it return false and global variable PMResult contains detailed information about the difference.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/str, /**string*/pattern, /**object*/defObj",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(32,10)"
			},
			{
				"name": "VerifyPattern",
				"description": "Match pattern using 'StringChecker.CheckPattern' and do an assertion for the result. `message` is an assertion message.\r\nWhen match is failed, detailed information about the difference is saved to the report.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string*/str, /**string*/pattern, /**object*/defObj",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(94,10)"
			},
			{
				"name": "CheckPatternRVL",
				"description": "Match pattern using 'StringChecker.CheckPattern'. The function returns `true` if match is successfull.\r\nThis version of function is dedicated to be used from RVL. Additional pattern fields may be passed as additional parameters (RVL array params).\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/str, /**string*/pattern",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(110,10)"
			},
			{
				"name": "VerifyPatternRVL",
				"description": "Match pattern using 'StringChecker.CheckPattern' and do an assertion for the result. `message` is an assertion message.\r\nWhen match is failed, detailed information about the difference is saved to the report.\r\nThis version of function is dedicated to be used from RVL. Additional pattern fields may be passed as additional parameters (RVL array params).\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string*/str, /**string*/pattern",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(120,10)"
			},
			{
				"name": "CheckRegex",
				"description": "Check if `str` matches given regular expression. Match means the \r\nwhole `str` is covered by regexp.\r\nIf match is partial, it is assumed that there is no match. For example:\r\nABC matches A.*\r\nbut\r\nABC does not match AB (because it is partial match, not covering trailing C)\r\nIf you pass in the RegExp object as `regexstr`, then match will be done using RegExp.test function. I.e. it may be either partial or full match depending on use of ^ and $.\r\nFunction returns true if `str` matches the `regexstr`. Otherwise it return `false`.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/str, /**string|RegEx*/regexstr",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(137,10)"
			},
			{
				"name": "VerifyRegex",
				"description": "Verify that `str` matches given regular expression `regexstr` using StringChecker.CheckRegex.\r\nWhen match is failed, detailed information about the difference is saved to the report.\r\nThis version of function is dedicated to be used from RVL. Additional pattern fields may be passed as additional parameters (RVL array params).\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string*/str, /**string|RegEx*/regexstr",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(154,10)"
			},
			{
				"name": "CheckUnique",
				"description": "Check that given `val` is unique. I.e. it differs from all known previous values.\r\nFunction returns `true` if `val` is unique, `false` otherwise.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/val",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(165,10)"
			},
			{
				"name": "VerifyUnique",
				"description": "Verify that given `val` is unique. Write result to the report with provided `message`.\r\n",
				"type": "",
				"returns": "",
				"signature": "/**string*/message, /**string*/val",
				"paramInfo": {},
				"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js(195,10)"
			}
		],
		"isPageObject": true,
		"extend_rule": "",
		"description": "StringChecker helps comparing strings with regular patterns.",
		"src": "%WORKDIR%PageObjects\\StringChecker\\StringChecker.js"
	}
}