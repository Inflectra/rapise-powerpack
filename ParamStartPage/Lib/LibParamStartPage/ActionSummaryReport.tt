<#@ template hostspecific="true" language="C#" debug="true"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SeSWrappers" #>
<#@ import namespace="SeSWrappers.Utils" #>
<#@ import namespace="System.IO" #>
<#
	TextTemplatingEngineHost host = (TextTemplatingEngineHost)this.Host;
	string folderPath = host.OutputFolder;
	LogSession session = host.Report;
#>
[
<#
			int successCount = 0;
			int failureCount = 0;
			bool testPassed = false;
			string firstFailureName = "";
			string firstFailureComment = "";
			string lastParamName = "";
			string lastParamComment = "";
			bool veryFirst = true;

			foreach (LogData.LogEntry entry in session.entries)
			{
					string rowStatus = ""+entry.Status;
				if (entry.Status==LogStatus.Pass)
				{
					successCount++;
				}
				else if(entry.Status == LogStatus.Fail)
				{
					failureCount++;
					if( String.IsNullOrEmpty(firstFailureName) )
					{
						firstFailureName =	EscapeString(entry.Name);
						firstFailureComment = EscapeString(entry.Comment);
					}
				}
				
				if( entry.EType!="Test" )
				{
					if(entry.EType=="Message" && entry.Name.EndsWith("Parameters")) {
						lastParamName = EscapeString(entry.Name);
						lastParamComment = EscapeString(entry.Comment);
					} else {
						lastParamName = ""; 
						lastParamComment = "";
					}
					continue;
				}
				testPassed = successCount>0&&failureCount==0;
				if(!veryFirst) {
#>
	"Passed":<#=successCount#>,
	"Failed":<#=failureCount#>,
	"TestPassed":<#=testPassed?"true":"false"#>,
	"FirstFailureName":"<#=firstFailureName#>",
	"FirstFailureComment":"<#=firstFailureComment#>"
},
<#
				}
				veryFirst = false;
#>
{ 
	"Name":"<#=EscapeString(entry.Name)#>",
	"Comment":"<#=EscapeString(entry.Comment)#>",
	"LastParamComment":"<#=lastParamComment#>",

<#
				successCount = 0;
				failureCount = 0;
				testPassed = false;
				firstFailureName = "";
				firstFailureComment = "";
			} // foreach
			testPassed = successCount>0&&failureCount==0;
#>
	"Passed":<#=successCount#>,
	"Failed":<#=failureCount#>,
	"TestPassed":<#=testPassed?"true":"false"#>,
	"FirstFailureName":"<#=firstFailureName??""#>",
	"FirstFailureComment":"<#=firstFailureComment??""#>"
}
]
<#+
bool NeedEscape(string src, int i)
{
	char c = src[i];
	return c < 32 || c == '"' || c == '\\'
		// Broken lead surrogate
		|| (c >= '\uD800' && c <= '\uDBFF' &&
			(i == src.Length - 1 || src[i + 1] < '\uDC00' || src[i + 1] > '\uDFFF'))
		// Broken tail surrogate
		|| (c >= '\uDC00' && c <= '\uDFFF' &&
			(i == 0 || src[i - 1] < '\uD800' || src[i - 1] > '\uDBFF'))
		// To produce valid JavaScript
		|| c == '\u2028' || c == '\u2029'
		// Escape "</" for <script> tags
		|| (c == '/' && i > 0 && src[i - 1] == '<');
}
string EscapeString(string src)
{
	if( String.IsNullOrEmpty(src) ) return "";
	System.Text.StringBuilder sb = new System.Text.StringBuilder();

	int start = 0;
	for (int i = 0; i < src.Length; i++)
		if (NeedEscape(src, i))
		{
			sb.Append(src, start, i - start);
			switch (src[i])
			{
				case '\b': sb.Append("\\b"); break;
				case '\f': sb.Append("\\f"); break;
				case '\n': sb.Append("\\n"); break;
				case '\r': sb.Append("\\r"); break;
				case '\t': sb.Append("\\t"); break;
				case '\"': sb.Append("\\\""); break;
				case '\\': sb.Append("\\\\"); break;
				case '/': sb.Append("\\/"); break;
				default:
					sb.Append("\\u");
					sb.Append(((int)src[i]).ToString("x04"));
					break;
			}
			start = i + 1;
		}
	sb.Append(src, start, src.Length - start);
	return sb.ToString();
}
#>